name: LoadTestingWebApp
# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
    paths:
      - devops-pipelines/github-action/github-action-load-testing-web-app.yml
      - devops-pipelines/load-testing/load-testing-web-app-auth.yaml
      - devops-pipelines/load-testing/load-testing-web-app-auth.jmx
      - devops-pipelines/load-testing/load-testing-web-app.yaml
      - devops-pipelines/load-testing/load-testing-web-app.jmx   
   
  pull_request:
    branches: [ main ]
    paths:
      - devops-pipelines/github-action/github-action-load-testing-web-app.yml
      - devops-pipelines/load-testing/load-testing-web-app-auth.yaml
      - devops-pipelines/load-testing/load-testing-web-app-auth.jmx
      - devops-pipelines/load-testing/load-testing-web-app.yaml
      - devops-pipelines/load-testing/load-testing-web-app.jmx

  workflow_dispatch:
    inputs:
      azureADAuthenticationDisabled:
        description: 'Azure AD Authentication Disabled'
        required: true
        type: boolean
        default: false
      deploymentType:
        description: 'deployment Type for Frontend (WebUI), Backend (WebAPI) and Database (CosmosDB)'
        required: true
        type: choice
        default: 'web-storage-api-storage'
        options:
        - 'web-storage-api-storage'
        - 'web-app-api-storage'
        - 'web-app-api-cosmosdb'
    #    - "web-storage-api-storage: WebUI/Storage, WebAPI/Function, Database/Storage"
    #    - "web-app-api-storage: WebUI/AppService, WebAPI/Function, Database/Storage"
    #    - "web-app-api-cosmosdb: WebUI/AppService, WebAPI/Function, Database/CosmosDB"
      servicePlanSku:
        description: 'Azure Service Plan Sku'
        default: "B2"
        type: choice
        required: true
        options:    
        - "B1"
        - "B2"
        - "B3"
        - "S1"
        - "S2"
        - "S3"
        - "P1V2"
        - "P2V2"
        - "P3V2"
        - "P1V3"
        - "P2V3"
        - "P3V3"
      duration:
        description: 'Azure Load Testing duration in seconds'
        required: true
        default: '60'
      threads:
        description: 'Azure Load Testing number of threads'
        required: true
        default: '1'
      AZURE_REGION:
        description: 'Azure Region for the deployment'
        required: true
        default: "eastus2"
      AZURE_APP_PREFIX:
        description: 'Application prefix used for naming'
        required: true
        default: "visit1212"
      AZURE_APP_ID:
        description: 'Application Id of the application created outside of the pipeline'
        required: true
        default: ""
      AZURE_AD_TOKEN:
        description: 'Azure AD Token if created outside of the pipeline'
        required: true
        default: ""

env:
  AZURE_REGION: 'eastus2'
  AZURE_APP_PREFIX: 'visit1200'
  CONFIGURATION_FILE: './configuration/.default.env'
  LOAD_TEST_RESOURCE: "ldtest${{ github.event.inputs.AZURE_APP_PREFIX }}"
  LOAD_TEST_RESOURCE_GROUP: "ldtest${{ github.event.inputs.AZURE_APP_PREFIX }}rg" 


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  stage-deploy-infrastructure:
    runs-on: ubuntu-20.04
    outputs:
      ACR_LOGIN_SERVER: ${{ steps.deploy.outputs.ACR_LOGIN_SERVER }}
      WEB_APP_SERVER: ${{ steps.deploy.outputs.WEB_APP_SERVER }}
      FUNCTION_SERVER: ${{ steps.deploy.outputs.FUNCTION_SERVER }}
      WEB_APP_DOMAIN: ${{ steps.deploy.outputs.WEB_APP_DOMAIN }}
      FUNCTION_DOMAIN: ${{ steps.deploy.outputs.FUNCTION_DOMAIN }}
      COSMOS_DB_SERVICE_NAME: ${{ steps.deploy.outputs.COSMOS_DB_SERVICE_NAME }}
      STORAGE_ACCOUNT_NAME: ${{ steps.deploy.outputs.STORAGE_ACCOUNT_NAME }}
      APP_INSIGHTS_NAME: ${{ steps.deploy.outputs.APP_INSIGHTS_NAME }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        continue-on-error: false        
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Configuration
        run: |
          AZURE_SUBSCRIPTION_ID=$(az account show --query 'id' --output tsv)
          AZURE_TENANT_ID=$(az account show --query 'tenantId' --output tsv)
          echo "AZURE_REGION=${{ github.event.inputs.AZURE_REGION }}" > ${{ env.CONFIGURATION_FILE }}
          echo "AZURE_APP_PREFIX=${{ github.event.inputs.AZURE_APP_PREFIX }}" >> ${{ env.CONFIGURATION_FILE }}
          echo "AZURE_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID" >> ${{ env.CONFIGURATION_FILE }}
          echo "AZURE_TENANT_ID=$AZURE_TENANT_ID" >> ${{ env.CONFIGURATION_FILE }}
          cat ${{ env.CONFIGURATION_FILE }}         

      - name: Deploy Infrastructure 
        id: deploy
        run: |
          cmd="devops-pipelines/utils/iactool.sh -a deploy -c ${{ env.CONFIGURATION_FILE }} -d ${{ github.event.inputs.deploymentType }} -k ${{ github.event.inputs.servicePlanSku }} -e true -s true"
          echo "$cmd"
          eval "$cmd"
          # Read new variables set after the deployment in configuration file
          set -o allexport
          source "${{ variables.configurationFile }}"
          set +o allexport
          # Create the associated Azure DevOps variables
          echo "::set-output name=ACR_LOGIN_SERVER::${ACR_LOGIN_SERVER}"
          echo "::set-output name=WEB_APP_SERVER::${WEB_APP_SERVER}"
          echo "::set-output name=FUNCTION_SERVER::${FUNCTION_SERVER}"
          echo "::set-output name=WEB_APP_DOMAIN::${WEB_APP_DOMAIN}"
          echo "::set-output name=FUNCTION_DOMAIN::${FUNCTION_DOMAIN}"
          echo "::set-output name=COSMOS_DB_SERVICE_NAME::${COSMOS_DB_SERVICE_NAME}"
          echo "::set-output name=STORAGE_ACCOUNT_NAME::${STORAGE_ACCOUNT_NAME}"
          echo "::set-output name=APP_INSIGHTS_NAME::${APP_INSIGHTS_NAME}"

  stage-build-deploy:
    runs-on: ubuntu-20.04
    needs: stage-deploy-infrastructure
    outputs:
          AZURE_APP_ID: ${{ steps.createapp.outputs.AZURE_APP_ID }}

    steps:
      - uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        continue-on-error: false        
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Install Configuration and Pre-requisites
        run: |
          AZURE_SUBSCRIPTION_ID=$(az account show --query 'id' --output tsv)
          AZURE_TENANT_ID=$(az account show --query 'tenantId' --output tsv)
          echo "AZURE_REGION=${{ github.event.inputs.AZURE_REGION }}" > ${{ env.CONFIGURATION_FILE }}
          echo "AZURE_APP_PREFIX=${{ github.event.inputs.AZURE_APP_PREFIX }}" >> ${{ env.CONFIGURATION_FILE }}
          echo "AZURE_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID" >> ${{ env.CONFIGURATION_FILE }}
          echo "AZURE_TENANT_ID=$AZURE_TENANT_ID" >> ${{ env.CONFIGURATION_FILE }}
          cat ${{ env.CONFIGURATION_FILE }} 
          cmd="devops-pipelines/utils/iactool.sh -a install -c ${{ env.CONFIGURATION_FILE }} -e true" 
          echo "##[command]$cmd"
          eval "$cmd"

      - name: Get or Create ApplicationId
        id: creatapp
        run: |
          if [ -z ${{ github.event.inputs.AZURE_APP_PREFIX }} ]; then
            echo "Creating AZURE_APP_ID..."
            cmd="devops-pipelines/utils/iactool.sh -a createapp -c ${{ env.CONFIGURATION_FILE }} -d ${{ github.event.inputs.deploymentType }} -e true -s true"
            echo "##[command]$cmd"
            eval "$cmd"
            # Read new variables set after the creation of the Application in configuration file
            cat "${{ env.CONFIGURATION_FILE }}"
            set -o allexport
            source "${{ env.CONFIGURATION_FILE }}"
            set +o allexport
            echo "##[command]New AZURE_APP_ID: ${AZURE_APP_ID}"
            # Create the associated output variable
             echo "::set-output name=AZURE_APP_ID::${AZURE_APP_ID}"
          else
            echo "Existing AZURE_APP_ID: ${{ github.event.inputs.AZURE_APP_PREFIX }}"          
            # Create the associated Azure DevOps variables
            # Create the associated output variable
             echo "::set-output name=AZURE_APP_ID::${{ github.event.inputs.AZURE_APP_PREFIX }}"
          fi  
          if [ -z ${{ steps.creatapp.outputs.AZURE_APP_ID }} ]; then
              echo "Variable AZURE_APP_ID is not defined, do you have enough privilege to create an application?"
              exit 1
          fi   

      - name: Build Web API container for ${{ github.event.inputs.deploymentType }}
        run: |
          if [[ -z ${{ steps.createapp.outputs.AZURE_APP_ID }} || "${{ steps.createapp.outputs.AZURE_APP_ID }}" == 'null' || "${{ steps.createapp.outputs.AZURE_APP_ID }}" == '' ]] ; then
            AZURE_APP_ID=""
          else
            AZURE_APP_ID=${{ steps.createapp.outputs.AZURE_APP_ID }}
          fi
          cmd="devops-pipelines/utils/iactool.sh -a buildbe -c ${{ env.CONFIGURATION_FILE }} -d ${{ github.event.inputs.deploymentType }} -i  "\"$AZURE_APP_ID\"" -e true -s true -z ${{ github.event.inputs.azureADAuthenticationDisabled }}" 
          echo "##[command]$cmd"
          eval "$cmd"

      - name: Build Web UI container for ${{ github.event.inputs.deploymentType }}
        run: |
          if [[ -z ${{ steps.createapp.outputs.AZURE_APP_ID }} || "${{ steps.createapp.outputs.AZURE_APP_ID }}" == 'null' || "${{ steps.createapp.outputs.AZURE_APP_ID }}" == '' ]] ; then
            AZURE_APP_ID=""
          else
            AZURE_APP_ID=${{ steps.createapp.outputs.AZURE_APP_ID }}
          fi
          cmd="devops-pipelines/utils/iactool.sh -a buildfe -c ${{ env.CONFIGURATION_FILE }} -d ${{ github.event.inputs.deploymentType }} -i  "\"$AZURE_APP_ID\"" -e true -s true -z ${{ github.event.inputs.azureADAuthenticationDisabled }}" 
          echo "##[command]$cmd"
          eval "$cmd"

      - name: Deploy Web API container for ${{ github.event.inputs.deploymentType }}
        run: |
          if [[ -z ${{ steps.createapp.outputs.AZURE_APP_ID }} || "${{ steps.createapp.outputs.AZURE_APP_ID }}" == 'null' || "${{ steps.createapp.outputs.AZURE_APP_ID }}" == '' ]] ; then
            AZURE_APP_ID=""
          else
            AZURE_APP_ID=${{ steps.createapp.outputs.AZURE_APP_ID }}
          fi
          cmd="devops-pipelines/utils/iactool.sh -a deploybe -c ${{ env.CONFIGURATION_FILE }} -d ${{ github.event.inputs.deploymentType }} -i  "\"$AZURE_APP_ID\"" -e true -s true " 
          echo "##[command]$cmd"
          eval "$cmd"

      - name: Deploy Web UI container for ${{ github.event.inputs.deploymentType }}
        run: |
          if [[ -z ${{ steps.createapp.outputs.AZURE_APP_ID }} || "${{ steps.createapp.outputs.AZURE_APP_ID }}" == 'null' || "${{ steps.createapp.outputs.AZURE_APP_ID }}" == '' ]] ; then
            AZURE_APP_ID=""
          else
            AZURE_APP_ID=${{ steps.createapp.outputs.AZURE_APP_ID }}
          fi
          cmd="devops-pipelines/utils/iactool.sh -a deployfe -c ${{ env.CONFIGURATION_FILE }} -d ${{ github.event.inputs.deploymentType }} -i  "\"$AZURE_APP_ID\"" -e true -s true " 
          echo "##[command]$cmd"
          eval "$cmd"

  stage-load-test:
    runs-on: ubuntu-20.04
    needs: stage-build-deploy

    steps:
      - uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        continue-on-error: false        
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get Token
        id: gettoken
        run: |
          # Get Access Token azureADAuthenticationDisabled = False
          if [ "${{ github.event.inputs.azureADAuthenticationDisabled }}" == "False" ]; then
            echo "AZURE_APP_ID: ${{ needs.stage-build-deploy.outputs.AZURE_APP_ID }}"
            if [ -z ${{ github.event.inputs.AZURE_AD_TOKEN }} ]; then
              AZURE_AD_TOKEN="Bearer $(az account get-access-token --resource api:// ${{ needs.stage-build-deploy.outputs.AZURE_APP_ID }} | jq -r .accessToken)"
              echo "New AZURE_AD_TOKEN: $AZURE_AD_TOKEN"          
              echo "::set-output name=AZURE_AD_TOKEN::$AZURE_AD_TOKEN"
            else
              echo "Existing AZURE_AD_TOKEN: ${{ github.event.inputs.AZURE_AD_TOKEN }}"          
              echo "::set-output name=AZURE_AD_TOKEN::${{ github.event.inputs.AZURE_AD_TOKEN }}"
            fi 2>/dev/null                  
          fi

      - name: 'Step Run Load Testing Web App'
        uses: azure/load-testing@v1
        if: ${{ "${{ github.event.inputs.azureADAuthenticationDisabled }}" == "true" }}
        with:
            loadTestConfigFile: 'devops-pipelines/load-testing/load-testing-web-app.yaml'
            resourceGroup: ${{ env.LOAD_TEST_RESOURCE_GROUP }}
            loadTestResource: ${{ env.LOAD_TEST_RESOURCE }}   
            env: |
              [
                {
                "name": "webapp",
                "value": "${{needs.stage-deploy-infrastructure.outputs.WEB_APP_DOMAIN }}"
                },
                {
                "name": "function",
                "value": "${{needs.stage-deploy-infrastructure.outputs.FUNCTION_DOMAIN }}"
                },
                {
                "name": "duration",
                "value": "${{ github.event.inputs.duration }}"
                },
                {
                "name": "threads",
                "value": "${{ github.event.inputs.threads }}"
                }          
              ]

      - name: 'Step Run Load Testing Web App with Auth'
        uses: azure/load-testing@v1
        if: ${{ "${{ github.event.inputs.azureADAuthenticationDisabled }}" == "false" }}
        with:
            loadTestConfigFile: 'devops-pipelines/load-testing/load-testing-web-app-auth.yaml'
            resourceGroup: ${{ env.LOAD_TEST_RESOURCE_GROUP }}
            loadTestResource: ${{ env.LOAD_TEST_RESOURCE }}
            secrets: |
              [
                {
                "name": "token",
                "value": "${{ steps.gettoken.outputs.AZURE_AD_TOKEN }}"  
                }              
              ]        
            env: |
              [
                {
                "name": "webapp",
                "value": "${{needs.stage-deploy-infrastructure.outputs.WEB_APP_DOMAIN }}"
                },
                {
                "name": "function",
                "value": "${{needs.stage-deploy-infrastructure.outputs.FUNCTION_DOMAIN }}"
                },
                {
                "name": "duration",
                "value": "${{ github.event.inputs.duration }}"
                },
                {
                "name": "threads",
                "value": "${{ github.event.inputs.threads }}"
                }                      
              ]

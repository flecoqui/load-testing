trigger:
  branches:
    include:
    - "main"
  paths:
    include:
    - devops-pipelines/azure-pipelines/azure-pipelines-load-testing-eventhub-asa.yml
    - devops-pipelines/load-testing/load-testing-eventhub-asa.yaml
    - devops-pipelines/load-testing/load-testing-eventhub-asa.jmx

pool:
  vmImage: ubuntu-latest

parameters:
  - name: eventhubSku
    displayName: Azure Event Hubs Sku
    type: string
    default: "Standard"
    values:    
    - "Basic"
    - "Standard"
    - "Premium"
  - name: duration
    displayName: Azure Load Testing duration in seconds
    type: number
    default: 60
  - name: threads
    displayName: Azure Load Testing number of threads
    type: number
    default: 1
  - name: engineInstances
    displayName: Azure Load Testing number of Engine Instances
    type: number
    default: 1
  - name: errorPercentage
    displayName: Azure Load Testing success criteria Error Percentage threshold 
    type: number
    default: 5
  - name: responseTimeMs
    displayName: Azure Load Testing success criteria average response time in ms threshold 
    type: number
    default: 100    

variables:
  - name: configurationFile
    value:  './configuration/.default.env'
  - group: load-testing-vg
  - name: loadTestResource
    value: "ldtest$(AZURE_APP_PREFIX)"
  - name: loadTestResourceGroup
    value: "ldtest$(AZURE_APP_PREFIX)rg"
  - name: deploymentType
    value: "eventhub-asa"

stages:
- stage: StageDeployInfrastructure
  displayName: Stage Deploy Infrastructure
  condition: succeeded()
  jobs:
  - job: JobDeployInfrastructure
    displayName: Job Deploy Infrastructure    
    steps:

    - task: AzureCLI@2
      displayName: 'Step Azure Authentication'  
      inputs:
        azureSubscription: $(SERVICE_CONNECTION)
        scriptType: "bash"
        addSpnToEnvironment: "true"
        scriptLocation: "inlineScript"
        inlineScript: |
          AZURE_SUBSCRIPTION_ID=$(az account show --query 'id' --output tsv)
          AZURE_TENANT_ID=$(az account show --query 'tenantId' --output tsv)
          echo "##vso[task.setvariable variable=AZURE_SUBSCRIPTION_ID]$AZURE_SUBSCRIPTION_ID" 
          echo "##vso[task.setvariable variable=AZURE_TENANT_ID]$AZURE_TENANT_ID" 
          echo "Service Principal Id: $servicePrincipalId"
          echo "Service Principal Key: $servicePrincipalKey"
          echo "AZURE_SUBSCRIPTION_ID: $AZURE_SUBSCRIPTION_ID"          
          echo "AZURE_TENANT_ID: $AZURE_TENANT_ID"  
          echo "Azure Infrastructure to test: ${{ variables.deploymentType }}"

          

    - task: AzureCLI@2
      displayName: 'Step Install Pre-requisites'
      inputs:
        azureSubscription: $(SERVICE_CONNECTION)
        scriptType: "bash"
        addSpnToEnvironment: "true"
        scriptLocation: "inlineScript"
        inlineScript: |
          echo "AZURE_REGION=$(AZURE_REGION)" > ${{ variables.configurationFile }}
          echo "AZURE_APP_PREFIX=$(AZURE_APP_PREFIX)" >> ${{ variables.configurationFile }}
          echo "AZURE_SUBSCRIPTION_ID=$(AZURE_SUBSCRIPTION_ID)" >> ${{ variables.configurationFile }}
          echo "AZURE_TENANT_ID=$(AZURE_TENANT_ID)" >> ${{ variables.configurationFile }}

    - task: AzureCLI@2
      displayName: 'Step Deploy Infrastructure ${{ variables.deploymentType }}'
      name: StepDeployInfrastructure           
      inputs:
        azureSubscription: $(SERVICE_CONNECTION)
        scriptType: "bash"
        addSpnToEnvironment: "true"
        failOnStandardError: "true" 
        scriptLocation: "inlineScript"
        inlineScript: |
          cmd="$(System.DefaultWorkingDirectory)/devops-pipelines/utils/iactool.sh -a deploy -c ${{ variables.configurationFile }} -d ${{ variables.deploymentType }}  -h ${{ parameters.eventhubSku }} -e true -s true" 
          echo "##[command]$cmd"
          eval "$cmd"
          # Read new variables set after the deployment in configuration file
          set -o allexport
          source "${{ variables.configurationFile }}"
          set +o allexport
          # Create the associated Azure DevOps variables
          echo "##vso[task.setvariable variable=EVENTHUB_NAME_SPACE;isOutput=true]${EVENTHUB_NAME_SPACE}"
          echo "##vso[task.setvariable variable=EVENTHUB_INPUT_1_NAME;isOutput=true]${EVENTHUB_INPUT_1_NAME}"
          echo "##vso[task.setvariable variable=EVENTHUB_INPUT_2_NAME;isOutput=true]${EVENTHUB_INPUT_2_NAME}"
          echo "##vso[task.setvariable variable=EVENTHUB_OUTPUT_1_NAME;isOutput=true]${EVENTHUB_OUTPUT_1_NAME}"
          echo "##vso[task.setvariable variable=EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME;isOutput=true]${EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME}"
          echo "##vso[task.setvariable variable=EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME;isOutput=true]${EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME}"
          echo "##vso[task.setvariable variable=EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME;isOutput=true]${EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME}"
          echo "##vso[task.setvariable variable=STORAGE_ACCOUNT_NAME;isOutput=true]${STORAGE_ACCOUNT_NAME}"
          echo "##vso[task.setvariable variable=APP_INSIGHTS_NAME;isOutput=true]${APP_INSIGHTS_NAME}"
          echo "##vso[task.setvariable variable=RESOURCE_GROUP;isOutput=true]${RESOURCE_GROUP}"
          echo "##vso[task.setvariable variable=STREAM_ANALYTICS_JOB_NAME;isOutput=true]${STREAM_ANALYTICS_JOB_NAME}"

- stage: StagePrepareEventHub
  displayName: Prepare Event Hub and Start ASA Job
  dependsOn: StageDeployInfrastructure 
  variables:
    EVENTHUB_NAME_SPACE: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_NAME_SPACE'] ]      
    EVENTHUB_INPUT_1_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_1_NAME'] ]
    EVENTHUB_INPUT_2_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_2_NAME'] ]
    EVENTHUB_OUTPUT_1_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_OUTPUT_1_NAME'] ]
    EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME'] ]
    EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME'] ]
    EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME'] ]
    STORAGE_ACCOUNT_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.STORAGE_ACCOUNT_NAME'] ]
    APP_INSIGHTS_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.APP_INSIGHTS_NAME'] ]
    RESOURCE_GROUP: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.RESOURCE_GROUP'] ]
    STREAM_ANALYTICS_JOB_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.STREAM_ANALYTICS_JOB_NAME'] ]

  jobs:
  - job: JobPrepareEventHub
    displayName: Job Prepare EventHub
    steps:

    - task: AzureCLI@2
      displayName: 'Step Azure Authentication'  
      inputs:
        azureSubscription: $(SERVICE_CONNECTION)
        scriptType: "bash"
        addSpnToEnvironment: "true"
        scriptLocation: "inlineScript"
        inlineScript: |
          AZURE_SUBSCRIPTION_ID=$(az account show --query 'id' --output tsv)
          AZURE_TENANT_ID=$(az account show --query 'tenantId' --output tsv)
          echo "##vso[task.setvariable variable=AZURE_SUBSCRIPTION_ID]$AZURE_SUBSCRIPTION_ID" 
          echo "##vso[task.setvariable variable=AZURE_TENANT_ID]$AZURE_TENANT_ID" 
          echo "Service Principal Id: $servicePrincipalId"
          echo "Service Principal Key: $servicePrincipalKey"
          echo "AZURE_SUBSCRIPTION_ID: $AZURE_SUBSCRIPTION_ID"          
          echo "AZURE_TENANT_ID: $AZURE_TENANT_ID"  
          echo "Azure Infrastructure to test: ${{ variables.deploymentType }}"

          echo "EVENTHUB_NAME_SPACE: $(EVENTHUB_NAME_SPACE)"
          echo "EVENTHUB_INPUT_1_NAME: $(EVENTHUB_INPUT_1_NAME)"
          echo "EVENTHUB_INPUT_2_NAME: $(EVENTHUB_INPUT_2_NAME)"
          echo "EVENTHUB_OUTPUT_1_NAME: $(EVENTHUB_OUTPUT_1_NAME)"
          echo "EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME: $(EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME)"
          echo "EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME: $(EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME)"
          echo "EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME: $(EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME)"

    - task: AzureCLI@2
      displayName: 'Prepare Eventhubs and Asa: ${{ variables.deploymentType }}'
      inputs:
        azureSubscription: $(SERVICE_CONNECTION)
        scriptType: "bash"
        addSpnToEnvironment: "true"
        scriptLocation: "inlineScript"
        inlineScript: |
          echo "Service Principal Id: $servicePrincipalId"
          echo "Service Principal Key: $servicePrincipalKey"
          echo "AZURE_REGION=$(AZURE_REGION)" > ${{ variables.configurationFile }}
          echo "AZURE_APP_PREFIX=$(AZURE_APP_PREFIX)" >> ${{ variables.configurationFile }}
          echo "AZURE_SUBSCRIPTION_ID=$(AZURE_SUBSCRIPTION_ID)" >> ${{ variables.configurationFile }}
          echo "AZURE_TENANT_ID=$(AZURE_TENANT_ID)" >> ${{ variables.configurationFile }}
          echo "EVENTHUB_NAME_SPACE: $(EVENTHUB_NAME_SPACE)"
          echo "EVENTHUB_INPUT_1_NAME: $(EVENTHUB_INPUT_1_NAME)"
          echo "EVENTHUB_INPUT_2_NAME: $(EVENTHUB_INPUT_2_NAME)"
          echo "EVENTHUB_OUTPUT_1_NAME: $(EVENTHUB_OUTPUT_1_NAME)"
          echo "EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME: $(EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME)"
          echo "EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME: $(EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME)"
          echo "EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME: $(EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME)"
          echo "STREAM_ANALYTICS_JOB_NAME: $(STREAM_ANALYTICS_JOB_NAME)"
          echo "RESOURCE_GROUP: $(RESOURCE_GROUP)"          
          cmd="$(System.DefaultWorkingDirectory)/devops-pipelines/utils/iactool.sh -a deployev -c ${{ variables.configurationFile }} -d ${{ variables.deploymentType }} -e true -s true" 
          echo "##[command]$cmd"
          eval "$cmd"


    - task: AzureCLI@2
      displayName: 'Step Start Azure Stream Analytics Job'     
      inputs:
        azureSubscription: $(SERVICE_CONNECTION)
        scriptType: "bash"
        addSpnToEnvironment: "true"
        scriptLocation: "inlineScript"
        inlineScript: |
          # Ensure that AZ cli extensions are installed silently
          az config set extension.use_dynamic_install=yes_without_prompt

          # Check if resource exists
          jobname=$(az stream-analytics job show --resource-group '$(RESOURCE_GROUP)' --job-name '$(STREAM_ANALYTICS_JOB_NAME)' -o json 2> /dev/null| jq -r '.name')

          if [[ -n "$jobname" ]]
          then
            # Based on the state, --output-start-mode will not have the same value
            jobState=$(az stream-analytics job show -n '$(STREAM_ANALYTICS_JOB_NAME)' -g '$(RESOURCE_GROUP)' --query 'jobState' -o tsv)
            if [ "$jobState" = 'Created' ]
            then
              echo "##[command]Starting Stream Analytics Job $(STREAM_ANALYTICS_JOB_NAME)..."
              az stream-analytics job start \
                --job-name $(STREAM_ANALYTICS_JOB_NAME) \
                --resource-group "$(RESOURCE_GROUP)"
            else
              echo "##[command]Starting Stream Analytics Job $(STREAM_ANALYTICS_JOB_NAME)..."
              az stream-analytics job start \
                --job-name $(STREAM_ANALYTICS_JOB_NAME) \
                --resource-group "$(RESOURCE_GROUP)" \
                --output-start-mode "LastOutputEventTime"
            fi
          else
            echo "##[command]Stream Analytics Job $(STREAM_ANALYTICS_JOB_NAME) doesn't exist..."
            exit 1
          fi

- stage: StageLatencyMeasurement
  displayName: Latency Measurement
  dependsOn: 
  - StagePrepareEventHub
  - StageDeployInfrastructure   
  variables:
    EVENTHUB_NAME_SPACE: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_NAME_SPACE'] ]      
    EVENTHUB_INPUT_1_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_1_NAME'] ]
    EVENTHUB_INPUT_2_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_2_NAME'] ]
    EVENTHUB_OUTPUT_1_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_OUTPUT_1_NAME'] ]
    EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME'] ]
    EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME'] ]
    EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME'] ]
    STORAGE_ACCOUNT_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.STORAGE_ACCOUNT_NAME'] ]
    APP_INSIGHTS_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.APP_INSIGHTS_NAME'] ]
    RESOURCE_GROUP: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.RESOURCE_GROUP'] ]
    STREAM_ANALYTICS_JOB_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.STREAM_ANALYTICS_JOB_NAME'] ]

  condition: succeeded()
  jobs:
  - job: JobLatency
    displayName: Job Latency
    steps:
    
    - task: AzureCLI@2
      displayName: 'Step Azure Authentication'  
      inputs:
        azureSubscription: $(SERVICE_CONNECTION)
        scriptType: "bash"
        addSpnToEnvironment: "true"
        scriptLocation: "inlineScript"
        inlineScript: |
          AZURE_SUBSCRIPTION_ID=$(az account show --query 'id' --output tsv)
          AZURE_TENANT_ID=$(az account show --query 'tenantId' --output tsv)
          echo "##vso[task.setvariable variable=AZURE_SUBSCRIPTION_ID]$AZURE_SUBSCRIPTION_ID" 
          echo "##vso[task.setvariable variable=AZURE_TENANT_ID]$AZURE_TENANT_ID" 
          echo "Service Principal Id: $servicePrincipalId"
          echo "Service Principal Key: $servicePrincipalKey"
          echo "AZURE_SUBSCRIPTION_ID: $AZURE_SUBSCRIPTION_ID"          
          echo "AZURE_TENANT_ID: $AZURE_TENANT_ID"  
          echo "Azure Infrastructure to test: ${{ variables.deploymentType }}"

          echo "EVENTHUB_NAME_SPACE: $(EVENTHUB_NAME_SPACE)"
          echo "EVENTHUB_INPUT_1_NAME: $(EVENTHUB_INPUT_1_NAME)"
          echo "EVENTHUB_INPUT_2_NAME: $(EVENTHUB_INPUT_2_NAME)"
          echo "EVENTHUB_OUTPUT_1_NAME: $(EVENTHUB_OUTPUT_1_NAME)"
          echo "EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME: $(EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME)"
          echo "EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME: $(EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME)"
          echo "EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME: $(EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME)"

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.8' 
        addToPath: true 
        architecture: 'x64'

    - script:
        pip install -r "$(System.DefaultWorkingDirectory)/devops-pipelines/load-testing/latency/requirements.txt"
      displayName: 'SETUP: Install latency measurement dependencies'

    - task: AzureCLI@2
      displayName: "STEP: Measure Latency during ${{ parameters.duration }} seconds"
      inputs:
        azureSubscription: $(SERVICE_CONNECTION)
        scriptType: bash
        scriptLocation: inlineScript
        workingDirectory: "$(System.DefaultWorkingDirectory)/devops-pipelines/load-testing/latency"
        inlineScript: |
          # Get the eventhubs connection string
          connectionStr=$(az eventhubs namespace authorization-rule keys list --resource-group $(RESOURCE_GROUP) --namespace-name $(EVENTHUB_NAME_SPACE) --name RootManageSharedAccessKey --query 'primaryConnectionString' -o tsv)
          echo "connectionStr: $connectionStr"
          # Create directory to receive results
          if [ ! -d ./latencyresults ]; then
            mkdir ./latencyresults        
          fi     

          cmd="pytest -q -s --junitxml=junit/test-results.xml --disable-pytest-warnings \
            --eventhubs-connection-string \"$connectionStr\" \
            --input-csv-input-1 ./data/events1.csv \
            --eventhub-input-1-name \"$(EVENTHUB_INPUT_1_NAME)\" \
            --input-csv-input-2 ./data/events2.csv \
            --eventhub-input-2-name \"$(EVENTHUB_INPUT_2_NAME)\" \
            --eventhub-output-1-name \"$(EVENTHUB_OUTPUT_1_NAME)\" \
            --eventhub-output-1-consumer-group \"$(EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME)\" \
            --receiving-duration-max-seconds ${{ parameters.duration }} \
            --no-transmission-duration-seconds 5 \
            --junit-result-file ./latencyresults/output.xml \
            --asyncio-mode=strict \
            measure_latency.py"
          
          echo "$cmd"
          eval "$cmd"


    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(System.DefaultWorkingDirectory)/devops-pipelines/load-testing/latency/latencyresults/output.xml'
        failTaskOnFailedTests: false
      displayName: 'STEP: Publish Latency Results'

    - publish: $(System.DefaultWorkingDirectory)/devops-pipelines/load-testing/latency/latencyresults
      displayName: 'Step Publish Load Testing Results for deployment ${{ variables.deploymentType }} in $(System.DefaultWorkingDirectory)/devops-pipelines/load-testing/latency/latencyresults'
      artifact: LatencyResults-${{ variables.deploymentType }}
      condition: succeededOrFailed()

- stage: StageLatencyMeasurementDuringLoadTest
  displayName: Latency Measurement during Load Test
  dependsOn: 
  - StagePrepareEventHub
  - StageDeployInfrastructure 
  - StageLatencyMeasurement
  variables:
    EVENTHUB_NAME_SPACE: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_NAME_SPACE'] ]      
    EVENTHUB_INPUT_1_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_1_NAME'] ]
    EVENTHUB_INPUT_2_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_2_NAME'] ]
    EVENTHUB_OUTPUT_1_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_OUTPUT_1_NAME'] ]
    EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME'] ]
    EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME'] ]
    EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME'] ]
    STORAGE_ACCOUNT_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.STORAGE_ACCOUNT_NAME'] ]
    APP_INSIGHTS_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.APP_INSIGHTS_NAME'] ]
    RESOURCE_GROUP: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.RESOURCE_GROUP'] ]
    STREAM_ANALYTICS_JOB_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.STREAM_ANALYTICS_JOB_NAME'] ]

  condition: succeeded()
  jobs:
  - job: JobLatency
    displayName: Job Latency
    steps:
    
    - task: AzureCLI@2
      displayName: 'Step Azure Authentication'  
      inputs:
        azureSubscription: $(SERVICE_CONNECTION)
        scriptType: "bash"
        addSpnToEnvironment: "true"
        scriptLocation: "inlineScript"
        inlineScript: |
          AZURE_SUBSCRIPTION_ID=$(az account show --query 'id' --output tsv)
          AZURE_TENANT_ID=$(az account show --query 'tenantId' --output tsv)
          echo "##vso[task.setvariable variable=AZURE_SUBSCRIPTION_ID]$AZURE_SUBSCRIPTION_ID" 
          echo "##vso[task.setvariable variable=AZURE_TENANT_ID]$AZURE_TENANT_ID" 
          echo "Service Principal Id: $servicePrincipalId"
          echo "Service Principal Key: $servicePrincipalKey"
          echo "AZURE_SUBSCRIPTION_ID: $AZURE_SUBSCRIPTION_ID"          
          echo "AZURE_TENANT_ID: $AZURE_TENANT_ID"  
          echo "Azure Infrastructure to test: ${{ variables.deploymentType }}"

          echo "EVENTHUB_NAME_SPACE: $(EVENTHUB_NAME_SPACE)"
          echo "EVENTHUB_INPUT_1_NAME: $(EVENTHUB_INPUT_1_NAME)"
          echo "EVENTHUB_INPUT_2_NAME: $(EVENTHUB_INPUT_2_NAME)"
          echo "EVENTHUB_OUTPUT_1_NAME: $(EVENTHUB_OUTPUT_1_NAME)"
          echo "EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME: $(EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME)"
          echo "EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME: $(EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME)"
          echo "EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME: $(EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME)"

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.8' 
        addToPath: true 
        architecture: 'x64'

    - script:
        pip install -r "$(System.DefaultWorkingDirectory)/devops-pipelines/load-testing/latency/requirements.txt"
      displayName: 'SETUP: Install latency measurement dependencies'

    - task: AzureCLI@2
      displayName: "STEP: Measure Latency during ${{ parameters.duration }} seconds"
      inputs:
        azureSubscription: $(SERVICE_CONNECTION)
        scriptType: bash
        scriptLocation: inlineScript
        workingDirectory: "$(System.DefaultWorkingDirectory)/devops-pipelines/load-testing/latency"
        inlineScript: |
          # Get the eventhubs connection string
          connectionStr=$(az eventhubs namespace authorization-rule keys list --resource-group $(RESOURCE_GROUP) --namespace-name $(EVENTHUB_NAME_SPACE) --name RootManageSharedAccessKey --query 'primaryConnectionString' -o tsv)
          echo "connectionStr: $connectionStr"
          # Create directory to receive results
          if [ ! -d ./latencyloadtestresults ]; then
            mkdir ./latencyloadtestresults        
          fi     

          cmd="pytest -q -s --junitxml=junit/test-results.xml --disable-pytest-warnings \
            --eventhubs-connection-string \"$connectionStr\" \
            --input-csv-input-1 ./data/events1.csv \
            --eventhub-input-1-name \"$(EVENTHUB_INPUT_1_NAME)\" \
            --input-csv-input-2 ./data/events2.csv \
            --eventhub-input-2-name \"$(EVENTHUB_INPUT_2_NAME)\" \
            --eventhub-output-1-name \"$(EVENTHUB_OUTPUT_1_NAME)\" \
            --eventhub-output-1-consumer-group \"$(EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME)\" \
            --receiving-duration-max-seconds ${{ parameters.duration }} \
            --no-transmission-duration-seconds 5 \
            --junit-result-file ./latencyloadtestresults/output.xml \
            --asyncio-mode=strict \
            measure_latency.py"
          
          echo "$cmd"
          eval "$cmd"


    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(System.DefaultWorkingDirectory)/devops-pipelines/load-testing/latency/latencyloadtestresults/output.xml'
        failTaskOnFailedTests: false
      displayName: 'STEP: Publish Latency Results'

    - publish: $(System.DefaultWorkingDirectory)/devops-pipelines/load-testing/latency/latencyloadtestresults
      displayName: 'Step Publish Load Testing Results for deployment ${{ variables.deploymentType }} in $(System.DefaultWorkingDirectory)/devops-pipelines/load-testing/latency/latencyloadtestresults'
      artifact: LatencyResultsUnderLoadTesting-${{ variables.deploymentType }}
      condition: succeededOrFailed()

- stage: StageLoadTest
  displayName: Load Test
  dependsOn: 
  - StagePrepareEventHub
  - StageDeployInfrastructure 
  - StageLatencyMeasurement
  variables:
    EVENTHUB_NAME_SPACE: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_NAME_SPACE'] ]      
    EVENTHUB_INPUT_1_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_1_NAME'] ]
    EVENTHUB_INPUT_2_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_2_NAME'] ]
    EVENTHUB_OUTPUT_1_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_OUTPUT_1_NAME'] ]
    EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME'] ]
    EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME'] ]
    EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME'] ]
    STORAGE_ACCOUNT_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.STORAGE_ACCOUNT_NAME'] ]
    APP_INSIGHTS_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.APP_INSIGHTS_NAME'] ]
    RESOURCE_GROUP: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.RESOURCE_GROUP'] ]
    STREAM_ANALYTICS_JOB_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.STREAM_ANALYTICS_JOB_NAME'] ]

  condition: succeeded()
  jobs:
  - job: JobLoadTest
    displayName: Job Load Test
    steps:
    
    - task: AzureCLI@2
      displayName: 'Step Azure Authentication'  
      inputs:
        azureSubscription: $(SERVICE_CONNECTION)
        scriptType: "bash"
        addSpnToEnvironment: "true"
        scriptLocation: "inlineScript"
        inlineScript: |
          AZURE_SUBSCRIPTION_ID=$(az account show --query 'id' --output tsv)
          AZURE_TENANT_ID=$(az account show --query 'tenantId' --output tsv)
          echo "##vso[task.setvariable variable=AZURE_SUBSCRIPTION_ID]$AZURE_SUBSCRIPTION_ID" 
          echo "##vso[task.setvariable variable=AZURE_TENANT_ID]$AZURE_TENANT_ID" 
          echo "Service Principal Id: $servicePrincipalId"
          echo "Service Principal Key: $servicePrincipalKey"
          echo "AZURE_SUBSCRIPTION_ID: $AZURE_SUBSCRIPTION_ID"          
          echo "AZURE_TENANT_ID: $AZURE_TENANT_ID"  
          echo "Azure Infrastructure to test: ${{ variables.deploymentType }}"

          echo "EVENTHUB_NAME_SPACE: $(EVENTHUB_NAME_SPACE)"
          echo "EVENTHUB_INPUT_1_NAME: $(EVENTHUB_INPUT_1_NAME)"
          echo "EVENTHUB_INPUT_2_NAME: $(EVENTHUB_INPUT_2_NAME)"
          echo "EVENTHUB_OUTPUT_1_NAME: $(EVENTHUB_OUTPUT_1_NAME)"
          echo "EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME: $(EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME)"
          echo "EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME: $(EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME)"
          echo "EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME: $(EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME)"
          # Get Event Hub Token
          key=$(az eventhubs namespace authorization-rule keys list --resource-group $(RESOURCE_GROUP) --namespace-name $(EVENTHUB_NAME_SPACE) --name RootManageSharedAccessKey | jq -r .primaryKey)
          EVENTHUB_TOKEN=$(./devops-pipelines/load-testing/get-event-hub-token.sh $(EVENTHUB_NAME_SPACE) RootManageSharedAccessKey $key)
          echo "##vso[task.setvariable variable=EVENTHUB_TOKEN;issecret=true]$EVENTHUB_TOKEN"


    - task: AzureCLI@2
      displayName: 'Step configure and display Load Testing Configuration for Eventhub and Azure Stream Analytics'
      name: test
      inputs:
        azureSubscription: $(SERVICE_CONNECTION)
        scriptType: "bash"
        addSpnToEnvironment: "true"
        scriptLocation: "inlineScript"
        inlineScript: |
          echo "Duration: ${{ parameters.duration }}"
          echo "Threads: ${{ parameters.threads }}"          
          echo "Engine Instances: ${{ parameters.engineInstances }}"          
          echo "Error Percentage: ${{ parameters.errorPercentage }}"          
          echo "Response TimeMs: ${{ parameters.responseTimeMs }}"  
          # Update Load Testing configuration file
          sed -i "s/{engineInstances}/${{ parameters.engineInstances }}/g" "$(System.DefaultWorkingDirectory)/devops-pipelines/load-testing/load-testing-eventhub-asa.yaml"
          sed -i "s/{errorPercentage}/${{ parameters.errorPercentage }}\"/g" "$(System.DefaultWorkingDirectory)/devops-pipelines/load-testing/load-testing-eventhub-asa.yaml"
          sed -i "s/{responseTimeMs}/${{ parameters.responseTimeMs }}/g" "$(System.DefaultWorkingDirectory)/devops-pipelines/load-testing/load-testing-eventhub-asa.yaml"
          echo "$(System.DefaultWorkingDirectory)/devops-pipelines/load-testing/load-testing-eventhub-asa.yaml content:"
          cat "$(System.DefaultWorkingDirectory)/devops-pipelines/load-testing/load-testing-eventhub-asa.yaml"

    - task: AzureResourceManagerTemplateDeployment@3
      displayName: 'Step Deploy Load Testing ${{ variables.deploymentType }}'      
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: $(SERVICE_CONNECTION)
        subscriptionId: $(AZURE_SUBSCRIPTION_ID)
        action: 'Create Or Update Resource Group'
        resourceGroupName: $(loadTestResourceGroup)
        location: '$(AZURE_REGION)'
        templateLocation: 'Linked artifact'
        csmFile: '$(System.DefaultWorkingDirectory)/infra/load-testing/arm/template.json'
        overrideParameters: '-name $(loadTestResource) -location "$(AZURE_REGION)" -tags {"Environment":"Dev","Project":"load-testing"} '
        deploymentMode: 'Incremental'    
    

    - task: AzureLoadTest@1
      displayName: 'Step Run Load Testing EventHub and ASA'   
      inputs:
        azureSubscription: $(SERVICE_CONNECTION)
        loadTestConfigFile: '$(System.DefaultWorkingDirectory)/devops-pipelines/load-testing/load-testing-eventhub-asa.yaml'
        resourceGroup: $(loadTestResourceGroup)
        loadTestResource: $(loadTestResource)
        secrets: |
          [ 
            {
            "name": "eventhub_token",
            "value": "$(EVENTHUB_TOKEN)"
            }
          ]          
        env: |
          [
            {
            "name": "eventhub_name_space",
            "value": "$(EVENTHUB_NAME_SPACE)"
            },
            {
            "name": "eventhub_input_1",
            "value": "$(EVENTHUB_INPUT_1_NAME)"
            },
            {
            "name": "eventhub_input_2",
            "value": "$(EVENTHUB_INPUT_2_NAME)"
            },
            {
            "name": "eventhub_output_1",
            "value": "$(EVENTHUB_OUTPUT_1_NAME)"
            },               
            {
            "name": "eventhub_output_cg",
            "value": "$(EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME)"
            }, 
            {
            "name": "duration",
            "value": "${{ parameters.duration }}"
            },
            {
            "name": "threads",
            "value": "${{ parameters.threads }}"
            }
          ]          
          
    - publish: $(System.DefaultWorkingDirectory)/loadTest
      displayName: 'Step Publish Load Testing Results for deployment ${{ variables.deploymentType }} in $(System.DefaultWorkingDirectory)/loadTest'
      artifact: results


- stage: StageStopASAJob
  displayName: Stop ASA Job
  dependsOn: 
  - StageDeployInfrastructure
  - StageLatencyMeasurement  
  - StageLoadTest
  - StageLatencyMeasurementDuringLoadTest 
  variables:
    EVENTHUB_NAME_SPACE: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_NAME_SPACE'] ]      
    EVENTHUB_INPUT_1_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_1_NAME'] ]
    EVENTHUB_INPUT_2_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_2_NAME'] ]
    EVENTHUB_OUTPUT_1_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_OUTPUT_1_NAME'] ]
    EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME'] ]
    EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME'] ]
    EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME'] ]
    STORAGE_ACCOUNT_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.STORAGE_ACCOUNT_NAME'] ]
    APP_INSIGHTS_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.APP_INSIGHTS_NAME'] ]
    RESOURCE_GROUP: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.RESOURCE_GROUP'] ]
    STREAM_ANALYTICS_JOB_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.STREAM_ANALYTICS_JOB_NAME'] ]

  jobs:
  - job: JobStopASAJob
    displayName: Job Stop ASA Job
    steps:

    - task: AzureCLI@2
      displayName: 'Step Azure Authentication'  
      inputs:
        azureSubscription: $(SERVICE_CONNECTION)
        scriptType: "bash"
        addSpnToEnvironment: "true"
        scriptLocation: "inlineScript"
        inlineScript: |
          AZURE_SUBSCRIPTION_ID=$(az account show --query 'id' --output tsv)
          AZURE_TENANT_ID=$(az account show --query 'tenantId' --output tsv)
          echo "##vso[task.setvariable variable=AZURE_SUBSCRIPTION_ID]$AZURE_SUBSCRIPTION_ID" 
          echo "##vso[task.setvariable variable=AZURE_TENANT_ID]$AZURE_TENANT_ID" 
          echo "Service Principal Id: $servicePrincipalId"
          echo "Service Principal Key: $servicePrincipalKey"
          echo "AZURE_SUBSCRIPTION_ID: $AZURE_SUBSCRIPTION_ID"          
          echo "AZURE_TENANT_ID: $AZURE_TENANT_ID"  
          echo "Azure Infrastructure to test: ${{ variables.deploymentType }}"

          echo "EVENTHUB_NAME_SPACE: $(EVENTHUB_NAME_SPACE)"
          echo "EVENTHUB_INPUT_1_NAME: $(EVENTHUB_INPUT_1_NAME)"
          echo "EVENTHUB_INPUT_2_NAME: $(EVENTHUB_INPUT_2_NAME)"
          echo "EVENTHUB_OUTPUT_1_NAME: $(EVENTHUB_OUTPUT_1_NAME)"
          echo "EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME: $(EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME)"
          echo "EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME: $(EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME)"
          echo "EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME: $(EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME)"

    - task: AzureCLI@2
      displayName: 'Step Stop Azure Stream Analytics Job'    
      inputs:
        azureSubscription: $(SERVICE_CONNECTION)
        scriptType: "bash"
        addSpnToEnvironment: "true"
        scriptLocation: "inlineScript"
        inlineScript: |
          # Ensure that AZ cli extensions are installed silently
          az config set extension.use_dynamic_install=yes_without_prompt

          jobState=$(az stream-analytics job show -n '$(STREAM_ANALYTICS_JOB_NAME)' -g '$(RESOURCE_GROUP)' --query 'jobState' -o tsv)
          if [[ -z "$jobState" || "$jobState" == 'Created' ]]
          then
            echo "##[command]The job $(STREAM_ANALYTICS_JOB_NAME) does not exist or is in Created state. No need to stop it."
            exit 0
          fi
          echo "##[command]Stopping Stream Analytics Job $(STREAM_ANALYTICS_JOB_NAME)..."          
          az stream-analytics job stop \
            --job-name $(STREAM_ANALYTICS_JOB_NAME) \
            --resource-group "$(RESOURCE_GROUP)"
        failOnStandardError: false
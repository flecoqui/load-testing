trigger:
  branches:
    include:
    - "main"
  paths:
    include:
    - devops-pipelines/azure-pipelines/azure-pipelines-load-testing-eventhub.yml
    - devops-pipelines/load-testing/load-testing-eventhub.yaml
    - devops-pipelines/load-testing/load-testing-eventhub.jmx

pool:
  vmImage: ubuntu-latest

parameters:
  - name: eventhubSku
    displayName: Azure Event Hubs Sku
    type: string
    default: "Standard"
    values:    
    - "Basic"
    - "Standard"
    - "Premium"
  - name: duration
    displayName: Azure Load Testing duration in seconds
    type: number
    default: 60
  - name: threads
    displayName: Azure Load Testing number of threads
    type: number
    default: 1

variables:
  - name: configurationFile
    value:  './configuration/.default.env'
  - group: load-testing-vg
  - name: loadTestResource
    value: "ldtest$(AZURE_APP_PREFIX)"
  - name: loadTestResourceGroup
    value: "ldtest$(AZURE_APP_PREFIX)rg" 
  - name: deploymentType
    value: "eventhub"

stages:
- stage: StageDeployInfrastructure
  displayName: Stage Deploy Infrastructure
  condition: succeeded()
  jobs:
  - job: JobDeployInfrastructure
    displayName: Job Deploy Infrastructure    
    steps:

    - task: AzureCLI@2
      displayName: 'Step Azure Authentication'  
      inputs:
        azureSubscription: $(SERVICE_CONNECTION)
        scriptType: "bash"
        addSpnToEnvironment: "true"
        scriptLocation: "inlineScript"
        inlineScript: |
          AZURE_SUBSCRIPTION_ID=$(az account show --query 'id' --output tsv)
          AZURE_TENANT_ID=$(az account show --query 'tenantId' --output tsv)
          echo "##vso[task.setvariable variable=AZURE_SUBSCRIPTION_ID]$AZURE_SUBSCRIPTION_ID" 
          echo "##vso[task.setvariable variable=AZURE_TENANT_ID]$AZURE_TENANT_ID" 
          echo "Service Principal Id: $servicePrincipalId"
          echo "Service Principal Key: $servicePrincipalKey"
          echo "AZURE_SUBSCRIPTION_ID: $AZURE_SUBSCRIPTION_ID"          
          echo "AZURE_TENANT_ID: $AZURE_TENANT_ID"  
          echo "Azure Infrastructure to test: ${{ variables.deploymentType }}"
          
    - task: AzureCLI@2
      displayName: 'Step Install Pre-requisites'
      inputs:
        azureSubscription: $(SERVICE_CONNECTION)
        scriptType: "bash"
        addSpnToEnvironment: "true"
        scriptLocation: "inlineScript"
        inlineScript: |
          echo "AZURE_REGION=$(AZURE_REGION)" > $(configurationFile)
          echo "AZURE_APP_PREFIX=$(AZURE_APP_PREFIX)" >> $(configurationFile)
          echo "AZURE_SUBSCRIPTION_ID=$(AZURE_SUBSCRIPTION_ID)" >> $(configurationFile)
          echo "AZURE_TENANT_ID=$(AZURE_TENANT_ID)" >> $(configurationFile)

    - task: AzureCLI@2
      displayName: 'Step Deploy Infrastructure ${{ variables.deploymentType }}'
      name: StepDeployInfrastructure
      inputs:
        azureSubscription: $(SERVICE_CONNECTION)
        scriptType: "bash"
        addSpnToEnvironment: "true"
        failOnStandardError: "true" 
        scriptLocation: "inlineScript"
        inlineScript: |
          cmd="$(System.DefaultWorkingDirectory)/devops-pipelines/utils/iactool.sh -a deploy -c $(configurationFile) -d ${{ variables.deploymentType }} -h ${{ parameters.eventhubSku }} -e true -s true" 
          echo "##[command]$cmd"
          eval "$cmd"
          # Read new variables set after the deployment in configuration file
          set -o allexport
          source "${{ variables.configurationFile }}"
          set +o allexport
          # Create the associated Azure DevOps variables
          echo "##vso[task.setvariable variable=EVENTHUB_NAME_SPACE;isOutput=true]${EVENTHUB_NAME_SPACE}"
          echo "##vso[task.setvariable variable=EVENTHUB_INPUT_1_NAME;isOutput=true]${EVENTHUB_INPUT_1_NAME}"
          echo "##vso[task.setvariable variable=EVENTHUB_INPUT_2_NAME;isOutput=true]${EVENTHUB_INPUT_2_NAME}"
          echo "##vso[task.setvariable variable=EVENTHUB_OUTPUT_1_NAME;isOutput=true]${EVENTHUB_OUTPUT_1_NAME}"
          echo "##vso[task.setvariable variable=EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME;isOutput=true]${EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME}"
          echo "##vso[task.setvariable variable=EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME;isOutput=true]${EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME}"
          echo "##vso[task.setvariable variable=EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME;isOutput=true]${EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME}"
          echo "##vso[task.setvariable variable=STORAGE_ACCOUNT_NAME;isOutput=true]${STORAGE_ACCOUNT_NAME}"
          echo "##vso[task.setvariable variable=APP_INSIGHTS_NAME;isOutput=true]${APP_INSIGHTS_NAME}"
          echo "##vso[task.setvariable variable=RESOURCE_GROUP;isOutput=true]${RESOURCE_GROUP}"

- stage: StagePrepareEventHub
  displayName: Prepare Event Hub 
  dependsOn: StageDeployInfrastructure 
  variables:
    EVENTHUB_NAME_SPACE: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_NAME_SPACE'] ]      
    EVENTHUB_INPUT_1_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_1_NAME'] ]
    EVENTHUB_INPUT_2_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_2_NAME'] ]
    EVENTHUB_OUTPUT_1_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_OUTPUT_1_NAME'] ]
    EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME'] ]
    EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME'] ]
    EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME'] ]
    STORAGE_ACCOUNT_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.STORAGE_ACCOUNT_NAME'] ]
    APP_INSIGHTS_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.APP_INSIGHTS_NAME'] ]
    RESOURCE_GROUP: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.RESOURCE_GROUP'] ]

  jobs:
  - job: JobPrepareEventHub
    displayName: Job Prepare EventHub
    steps:

    - task: AzureCLI@2
      displayName: 'Step Azure Authentication'  
      inputs:
        azureSubscription: $(SERVICE_CONNECTION)
        scriptType: "bash"
        addSpnToEnvironment: "true"
        scriptLocation: "inlineScript"
        inlineScript: |
          AZURE_SUBSCRIPTION_ID=$(az account show --query 'id' --output tsv)
          AZURE_TENANT_ID=$(az account show --query 'tenantId' --output tsv)
          echo "##vso[task.setvariable variable=AZURE_SUBSCRIPTION_ID]$AZURE_SUBSCRIPTION_ID" 
          echo "##vso[task.setvariable variable=AZURE_TENANT_ID]$AZURE_TENANT_ID" 
          echo "Service Principal Id: $servicePrincipalId"
          echo "Service Principal Key: $servicePrincipalKey"
          echo "AZURE_SUBSCRIPTION_ID: $AZURE_SUBSCRIPTION_ID"          
          echo "AZURE_TENANT_ID: $AZURE_TENANT_ID"  
          echo "Azure Infrastructure to test: ${{ variables.deploymentType }}"

          echo "EVENTHUB_NAME_SPACE: $(EVENTHUB_NAME_SPACE)"
          echo "EVENTHUB_INPUT_1_NAME: $(EVENTHUB_INPUT_1_NAME)"
          echo "EVENTHUB_INPUT_2_NAME: $(EVENTHUB_INPUT_2_NAME)"
          echo "EVENTHUB_OUTPUT_1_NAME: $(EVENTHUB_OUTPUT_1_NAME)"
          echo "EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME: $(EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME)"
          echo "EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME: $(EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME)"
          echo "EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME: $(EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME)"

    - task: AzureCLI@2
      displayName: 'Prepare Eventhubs: ${{ variables.deploymentType }}'
      inputs:
        azureSubscription: $(SERVICE_CONNECTION)
        scriptType: "bash"
        addSpnToEnvironment: "true"
        scriptLocation: "inlineScript"
        inlineScript: |
          echo "Service Principal Id: $servicePrincipalId"
          echo "Service Principal Key: $servicePrincipalKey"
          echo "AZURE_REGION=$(AZURE_REGION)" > $(configurationFile)
          echo "AZURE_APP_PREFIX=$(AZURE_APP_PREFIX)" >> $(configurationFile)
          echo "AZURE_SUBSCRIPTION_ID=$(AZURE_SUBSCRIPTION_ID)" >> $(configurationFile)
          echo "AZURE_TENANT_ID=$(AZURE_TENANT_ID)" >> $(configurationFile)
          echo "EVENTHUB_NAME_SPACE: $(EVENTHUB_NAME_SPACE)"
          echo "EVENTHUB_INPUT_1_NAME: $(EVENTHUB_INPUT_1_NAME)"
          echo "EVENTHUB_INPUT_2_NAME: $(EVENTHUB_INPUT_2_NAME)"
          echo "EVENTHUB_OUTPUT_1_NAME: $(EVENTHUB_OUTPUT_1_NAME)"
          echo "EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME: $(EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME)"
          echo "EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME: $(EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME)"
          echo "EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME: $(EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME)"
          cmd="$(System.DefaultWorkingDirectory)/devops-pipelines/utils/iactool.sh -a deployev -c $(configurationFile) -d ${{ variables.deploymentType }} -e true -s true" 
          echo "##[command]$cmd"
          eval "$cmd"

- stage: StageLoadTest
  displayName: Load Test
  dependsOn: 
  - StagePrepareEventHub
  - StageDeployInfrastructure 
  variables:
    EVENTHUB_NAME_SPACE: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_NAME_SPACE'] ]      
    EVENTHUB_INPUT_1_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_1_NAME'] ]
    EVENTHUB_INPUT_2_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_2_NAME'] ]
    EVENTHUB_OUTPUT_1_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_OUTPUT_1_NAME'] ]
    EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME'] ]
    EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME'] ]
    EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME'] ]
    STORAGE_ACCOUNT_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.STORAGE_ACCOUNT_NAME'] ]
    APP_INSIGHTS_NAME: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.APP_INSIGHTS_NAME'] ]
    RESOURCE_GROUP: $[ stageDependencies.StageDeployInfrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.RESOURCE_GROUP'] ]

  condition: succeeded()
  jobs:
  - job: JobLoadTest
    displayName: Job Load Test
    steps:
    
    - task: AzureCLI@2
      displayName: 'Step Azure Authentication'  
      inputs:
        azureSubscription: $(SERVICE_CONNECTION)
        scriptType: "bash"
        addSpnToEnvironment: "true"
        scriptLocation: "inlineScript"
        inlineScript: |
          AZURE_SUBSCRIPTION_ID=$(az account show --query 'id' --output tsv)
          AZURE_TENANT_ID=$(az account show --query 'tenantId' --output tsv)
          echo "##vso[task.setvariable variable=AZURE_SUBSCRIPTION_ID]$AZURE_SUBSCRIPTION_ID" 
          echo "##vso[task.setvariable variable=AZURE_TENANT_ID]$AZURE_TENANT_ID" 
          echo "Service Principal Id: $servicePrincipalId"
          echo "Service Principal Key: $servicePrincipalKey"
          echo "AZURE_SUBSCRIPTION_ID: $AZURE_SUBSCRIPTION_ID"          
          echo "AZURE_TENANT_ID: $AZURE_TENANT_ID"  
          echo "Azure Infrastructure to test: ${{ variables.deploymentType }}"

          echo "EVENTHUB_NAME_SPACE: $(EVENTHUB_NAME_SPACE)"
          echo "EVENTHUB_INPUT_1_NAME: $(EVENTHUB_INPUT_1_NAME)"
          echo "EVENTHUB_INPUT_2_NAME: $(EVENTHUB_INPUT_2_NAME)"
          echo "EVENTHUB_OUTPUT_1_NAME: $(EVENTHUB_OUTPUT_1_NAME)"
          echo "EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME: $(EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME)"
          echo "EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME: $(EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME)"
          echo "EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME: $(EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME)"

          # Get Event Hub Token
          key=$(az eventhubs namespace authorization-rule keys list --resource-group $(RESOURCE_GROUP) --namespace-name $(EVENTHUB_NAME_SPACE) --name RootManageSharedAccessKey | jq -r .primaryKey)
          EVENTHUB_TOKEN=$(./devops-pipelines/load-testing/get-event-hub-token.sh $(EVENTHUB_NAME_SPACE) RootManageSharedAccessKey $key)
          echo "##vso[task.setvariable variable=EVENTHUB_TOKEN;issecret=true]$EVENTHUB_TOKEN"

    - task: AzureResourceManagerTemplateDeployment@3
      displayName: 'Step Deploy Load Testing ${{ variables.deploymentType }}'      
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: $(SERVICE_CONNECTION)
        subscriptionId: $(AZURE_SUBSCRIPTION_ID)
        action: 'Create Or Update Resource Group'
        resourceGroupName: $(loadTestResourceGroup)
        location: '$(AZURE_REGION)'
        templateLocation: 'Linked artifact'
        csmFile: '$(System.DefaultWorkingDirectory)/infra/load-testing/arm/template.json'
        overrideParameters: '-name $(loadTestResource) -location "$(AZURE_REGION)" -tags {"Environment":"Dev","Project":"load-testing"} '
        deploymentMode: 'Incremental'    
    
    - task: AzureLoadTest@1
      displayName: 'Step Run Load Testing EventHub'  
      inputs:
        azureSubscription: $(SERVICE_CONNECTION)
        loadTestConfigFile: '$(System.DefaultWorkingDirectory)/devops-pipelines/load-testing/load-testing-eventhub.yaml'
        resourceGroup: $(loadTestResourceGroup)
        loadTestResource: $(loadTestResource)
        secrets: |
          [
            {
            "name": "eventhub_token",
            "value": "$(EVENTHUB_TOKEN)"
            }
          ]           
        env: |
          [
            {
            "name": "eventhub_name_space",
            "value": "$(EVENTHUB_NAME_SPACE)"
            },
            {
            "name": "eventhub_input_1",
            "value": "$(EVENTHUB_INPUT_1_NAME)"
            },
            {
            "name": "eventhub_input_2",
            "value": "$(EVENTHUB_INPUT_2_NAME)"
            },            
            {
            "name": "duration",
            "value": "${{ parameters.duration }}"
            },
            {
            "name": "threads",
            "value": "${{ parameters.threads }}"
            }
          ]
        
    - publish: $(System.DefaultWorkingDirectory)/loadTest
      displayName: 'Step Publish Load Testing Results for deployment ${{ variables.deploymentType }} in $(System.DefaultWorkingDirectory)/loadTest'
      artifact: results
